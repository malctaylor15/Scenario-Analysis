(MSFT_Log_R[(previous_day)]-mu_MSFT[i])^2
sigma_APPL[i+1]<-lambda*sigma_APPL[i] + (1-lambda)*
(APPL_Log_R[(previous_day)]-mu_APPL[i])^2
cov_sigma[i+1]<-lambda*cov_sigma[i] + (1-lambda)*
(MSFT_Log_R[(previous_day)]-mu_MSFT[i])*(APPL_Log_R[(previous_day)]-mu_APPL[i])
cov_mat <- matrix(c(sigma_MSFT[i+1],rep(cov_sigma[i+1],2),
sigma_APPL[i+1]),nrow=2,ncol=2)
}
#VaR calculations
weight_matrix <- matrix(c(W_MSFT,W_APPL),nrow=2,ncol=1) #MSFT AAPL weight matrix
Port_Dollar <- -Val_Port*weight_matrix # ct
(VaR <- (t(Port_Dollar)%*%mu_mat) +
(sqrt(t(Port_Dollar)%*%cov_mat%*%Port_Dollar))*qnorm(Alpha)) #Lin VaR
(K_VaR <- sqrt(K)*VaR) #K-day VaR
(Reg_Cap <- 3*(sqrt(K/2)*VaR)) #Regulatory Capital Change
setwd("C:/Users/board/Desktop/Kaggle/Scenario Analysis")
Data <- read.csv("MSFT_AAPL_Log_Returns.csv",header=TRUE)
###############################################################################################
###Corporate Risk Management HW3 Q2 Part I###
############################################################################################
#Log-returns
MSFT_Log_R <- Data$MSFT.Log.Return[!is.na(Data$MSFT.Log.Return)]
APPL_Log_R <- Data$AAPL.Log.Return[!is.na(Data$AAPL.Log.Return)]
#Portfolio parameters
Val_Port <- 1000000 #Portfolio Value
M_Cap_MSFT <- 448.77
M_Cap_APPL <- 577.1
# W_MSFT <- M_Cap_MSFT/(M_Cap_MSFT+M_Cap_APPL)#0.4383 ?slides
# W_APPL <- 1-W_MSFT #0.5617 ?slides
W_MSFT <- 0.5617
W_APPL <- 0.4383
Alpha <- 0.95 #Confidence
lambda <- 0.97
M <- 500 #Initial days EWMA
K <- 20 #K parameter for K-day VaR
length(MSFT_Log_R)==length(APPL_Log_R) #Check if if both have same # of obs.
n <- length(MSFT_Log_R) #Number of observations
#for-loop
mu_MSFT <- NULL
mu_APPL <- NULL
sigma_MSFT <- NULL
sigma_APPL <- NULL
cov_sigma<- NULL
# Initialize first numbers for EWMA for mu and covariance
mu_MSFT[1]<- mean(MSFT_Log_R[1:(M-1)])
mu_APPL[1]<- mean(APPL_Log_R[1:(M-1)])
sigma_MSFT[1]<-var(MSFT_Log_R[1:(M-1)])
sigma_APPL[1]<-var(APPL_Log_R[1:(M-1)])
cov_sigma[1]<-cov(MSFT_Log_R[1:(M-1)],APPL_Log_R[1:(M-1)])
# For loop for EWMA mu and covariance matrix
for(i in 1:(n-M-1)){
previous_day = M+i-1
#EWMA update for mu
mu_MSFT[i+1]<- lambda*mu_MSFT[(i)] +(1-lambda)*MSFT_Log_R[(previous_day)]
mu_APPL[i+1]<- lambda*mu_APPL[(i)]+(1-lambda)*APPL_Log_R[(previous_day)]
mu_mat <- matrix(c(mu_MSFT[i+1],mu_APPL[i+1]),nrow=2,ncol=1)
# EWMA update for covariance matrix
sigma_MSFT[i+1]<-lambda*sigma_MSFT[(i)] + (1-lambda)*
(MSFT_Log_R[(previous_day)]-mu_MSFT[i])^2
sigma_APPL[i+1]<-lambda*sigma_APPL[i] + (1-lambda)*
(APPL_Log_R[(previous_day)]-mu_APPL[i])^2
cov_sigma[i+1]<-lambda*cov_sigma[i] + (1-lambda)*
(MSFT_Log_R[(previous_day)]-mu_MSFT[i])*(APPL_Log_R[(previous_day)]-mu_APPL[i])
cov_mat <- matrix(c(sigma_MSFT[i+1],rep(cov_sigma[i+1],2),
sigma_APPL[i+1]),nrow=2,ncol=2)
}
#VaR calculations
weight_matrix <- matrix(c(W_MSFT,W_APPL),nrow=2,ncol=1) #MSFT AAPL weight matrix
Port_Dollar <- -Val_Port*weight_matrix # ct
(VaR <- (t(Port_Dollar)%*%mu_mat) +
(sqrt(t(Port_Dollar)%*%cov_mat%*%Port_Dollar))*qnorm(Alpha)) #Lin VaR
(K_VaR <- sqrt(K)*VaR) #K-day VaR
(Reg_Cap <- 3*(sqrt(K/2)*VaR)) #Regulatory Capital Change
setwd("C:/Users/board/Desktop/Kaggle/Scenario Analysis")
Data <- read.csv("MSFT_AAPL_Log_Returns.csv",header=TRUE)
###############################################################################################
###Corporate Risk Management HW3 Q2 Part I###
############################################################################################
#Log-returns
MSFT_Log_R <- Data$MSFT.Log.Return[!is.na(Data$MSFT.Log.Return)]
APPL_Log_R <- Data$AAPL.Log.Return[!is.na(Data$AAPL.Log.Return)]
#Portfolio parameters
Val_Port <- 1000000 #Portfolio Value
M_Cap_MSFT <- 448.77
M_Cap_APPL <- 577.1
# W_MSFT <- M_Cap_MSFT/(M_Cap_MSFT+M_Cap_APPL)#0.4383 ?slides
# W_APPL <- 1-W_MSFT #0.5617 ?slides
W_MSFT <- 0.5617
W_APPL <- 0.4383
Alpha <- 0.95 #Confidence
lambda <- 0.97
M <- 500 #Initial days EWMA
K <- 20 #K parameter for K-day VaR
length(MSFT_Log_R)==length(APPL_Log_R) #Check if if both have same # of obs.
n <- length(MSFT_Log_R) #Number of observations
#for-loop
mu_MSFT <- NULL
mu_APPL <- NULL
sigma_MSFT <- NULL
sigma_APPL <- NULL
cov_sigma<- NULL
# Initialize first numbers for EWMA for mu and covariance
mu_MSFT[1]<- mean(MSFT_Log_R[1:(M-1)])
mu_APPL[1]<- mean(APPL_Log_R[1:(M-1)])
sigma_MSFT[1]<-var(MSFT_Log_R[1:(M-1)])
sigma_APPL[1]<-var(APPL_Log_R[1:(M-1)])
cov_sigma[1]<-cov(MSFT_Log_R[1:(M-1)],APPL_Log_R[1:(M-1)])
# For loop for EWMA mu and covariance matrix
for(i in 1:(n-M-1)){
previous_day = M+i-1
#EWMA update for mu
mu_MSFT[i+1]<- lambda*mu_MSFT[(i)] +(1-lambda)*MSFT_Log_R[(previous_day)]
mu_APPL[i+1]<- lambda*mu_APPL[(i)]+(1-lambda)*APPL_Log_R[(previous_day)]
mu_mat <- matrix(c(mu_MSFT[i+1],mu_APPL[i+1]),nrow=2,ncol=1)
# EWMA update for covariance matrix
sigma_MSFT[i+1]<-lambda*sigma_MSFT[(i)] + (1-lambda)*
(MSFT_Log_R[(previous_day)]-mu_MSFT[i])^2
sigma_APPL[i+1]<-lambda*sigma_APPL[i] + (1-lambda)*
(APPL_Log_R[(previous_day)]-mu_APPL[i])^2
cov_sigma[i+1]<-lambda*cov_sigma[i] + (1-lambda)*
(MSFT_Log_R[(previous_day)]-mu_MSFT[i])*(APPL_Log_R[(previous_day)]-mu_APPL[i])
cov_mat <- matrix(c(sigma_MSFT[i+1],rep(cov_sigma[i+1],2),
sigma_APPL[i+1]),nrow=2,ncol=2)
}
#VaR calculations
weight_matrix <- matrix(c(W_MSFT,W_APPL),nrow=2,ncol=1) #MSFT AAPL weight matrix
Port_Dollar <- -Val_Port*weight_matrix # ct
(VaR <- (t(Port_Dollar)%*%mu_mat) +
(sqrt(t(Port_Dollar)%*%cov_mat%*%Port_Dollar))*qnorm(Alpha)) #Lin VaR
(K_VaR <- sqrt(K)*VaR) #K-day VaR
(Reg_Cap <- 3*(sqrt(K/2)*VaR)) #Regulatory Capital Change
#sim <- mvrnorm(50000, mu_mat, cov_mat)
#compare solutions with the values on slide 47 Lecture 8
##########################################################################
#########################################################################
####################  Question  3   #####################################
##########################################################################
#########################################################################
library(MASS)
multiVar <- function (mu_mat, cov_mat, K, weight_matrix, ValPort, Alpha = 0.95, lambda = 0.97){
# Reset mu, covariance matrix for EWMA
mu_MSFT <- NULL
mu_APPL <- NULL
mu_MSFT[1] <- mu_mat[1]
mu_APPL[1] <- mu_mat[2]
sigma_MSFT <- NULL
sigma_APPL <- NULL
cov_sigma <- NULL
sigma_MSFT[1] <- cov_mat[1,1]
sigma_APPL[1] <- cov_mat[2,2]
cov_sigma[1] <- cov_mat[1,2]
# Initialize return matrix for K days
Returns_sum1 <- rep(0, K)
Returns_sum2 <- rep(0, K)
# First observations for the shock
Xtplusdelta = mvrnorm(n=1,mu_mat,cov_mat)
Xtplusdelta[2] = mu_mat[2] - 5* (cov_mat[2,2]) #shock
for(i in 1:(K-1)) { # For each day after the shock
# Update mu with new observations
mu_MSFT[i+1]<- lambda*mu_MSFT[i]+(1-lambda)*Xtplusdelta[1]
mu_APPL[i+1]<- lambda*mu_APPL[i]+(1-lambda)*Xtplusdelta[2]
mu_mat <- matrix(c(mu_MSFT[i+1],mu_APPL[i+1]),nrow=2,ncol=1)
# Update EWMA covariance matrix with new observations
sigma_MSFT[i+1]<-lambda*sigma_MSFT[i] + (1-lambda)*
(Xtplusdelta[1]-mu_MSFT[i])^2
sigma_APPL[i+1]<-lambda*sigma_APPL[i] + (1-lambda)*
(Xtplusdelta[2]-mu_APPL[i])^2
cov_sigma[i+1]<-lambda*cov_sigma[i] + (1-lambda)*
(Xtplusdelta[1]-mu_MSFT[i])*(Xtplusdelta[2]-mu_APPL[i])
cov_mat <- matrix(c(sigma_MSFT[i+1],rep(cov_sigma[i+1],2),
sigma_APPL[i+1]),nrow=2,ncol=2)
# Store returns
Returns_sum1[i+1] = Returns_sum1[i]+ Xtplusdelta[1]
Returns_sum2[i+1] = Returns_sum2[i]+ Xtplusdelta[2]
# Redraw from multivariate distribution with new mu and covariance matrix
Xtplusdelta = mvrnorm(n=1,mu_mat,cov_mat)
}
# VaR Calculations
# weight_matrix <- matrix(c(W_MSFT,W_APPL),nrow=2,ncol=1) #MSFT AAPL weight matrix
Port_Dollar <- -Val_Port*weight_matrix # ct
(VaR <- (t(Port_Dollar)%*%mu_mat) +
(sqrt(t(Port_Dollar)%*%cov_mat%*%Port_Dollar))*qnorm(Alpha)) #Lin VaR
(K_VaR <- sqrt(K)*VaR) #K-day VaR
# (Reg_Cap <- 3*(sqrt(K/2)*VaR)) #Regulatory Capital Change
(Loss_kplusdelta = Port_Dollar[1]*Returns_sum1[K] +Port_Dollar[2]*Returns_sum2[K])
return (c(Loss_kplusdelta, K_VaR))
}
M_hat <-  50000
# Pre allocate space
results <- data.frame(matrix(0,nrow = M_hat, ncol = 2))
names(results)[1:2] <- c("Loss", "K_Var")
# MC
for (sample in 1:M_hat){
results[sample,] <- multiVar(mu_mat, cov_mat, K, weight_matrix, ValPort)
}
# Exceedance
# Kday Var Exceedances
(K_Var_exceedances <- sum(results[[2]] > rep(K_VaR,M_hat)) )
# Regulatory Cap exceedances
(Reg_cap_exceedances <- sum(results[[2]] > rep(Reg_Cap,M_hat)) )
# Quick Plots...
hist(results[[2]], breaks = 100)
abline(v = K_VaR, col = "blue", lwd = 3)
abline(v = Reg_Cap, col = "red", lwd = 3) # doesn't even show up -- too far right
# Frequencies
(100/M_hat) * K_Var_exceedances
(100/M_hat) * Reg_cap_exceedances
setwd("C:/Users/board/Desktop/Kaggle/Scenario Analysis/Other files")
data1<-read.csv(file.choose(new=FALSE),header = TRUE, sep=",",fill=TRUE,quote = "\"", skipNul = TRUE) #choose file MSFT_AAPL_Log_Returns.csv
data1<-read.csv("MSFT_AAPL_Log_Returns.csv")
data<-as.data.frame(data1[9:nrow(data1),1:ncol(data1)])
#clean data and only save what we want
AAPLReturns <- as.vector(data[,7])
MSFTReturns <- as.vector(data[,6])
AAPLReturns <- as.numeric(AAPLReturns)
MSFTReturns <- as.numeric(MSFTReturns)
wAAPL<-0.562546911
wMSFT<-0.437453089
Vt<-1000000
standard_Means <- c(0,0)
standard_CovMatrix <- matrix(rep(0,times = 4),nrow = 2, ncol = 2)
standard_Means[1] <- mean(AAPLReturns[1:499])
standard_Means[2] <- mean(MSFTReturns[1:499])
Log_Returns <- as.data.frame(cbind(AAPLReturns[1:499],MSFTReturns[1:499]))
standard_CovMatrix <- cov(Log_Returns)
lambda <- 0.97
EWMA_AAPL_mean <- c(0)
EWMA_MSFT_mean <- c(0)
## Notice we update our estimate from 11/9/1, which is the first data point in Return vector
EWMA_AAPL_mean[1] <- lambda*standard_Means[1] + (1-lambda)*AAPLReturns[500]  #501
EWMA_MSFT_mean[1] <- lambda*standard_Means[2] + (1-lambda)*MSFTReturns[500]  #501
for (i in 2:(length(AAPLReturns)-500+2))
{
EWMA_AAPL_mean[i] <- lambda*EWMA_AAPL_mean[i-1]+(1-lambda)*AAPLReturns[500+i-2] #start from 501
EWMA_MSFT_mean[i] <- lambda*EWMA_MSFT_mean[i-1]+(1-lambda)*MSFTReturns[500+i-2] #start from 501
}
EWMA_means <- cbind(EWMA_AAPL_mean,EWMA_MSFT_mean)
# Since it is hard to save matrix time series, we decompose covariance matrix as variances and covariances
EWMA_AAPL_var <- c(0)
EWMA_MSFT_var <- c(0)
EWMA_cov <- c(0)
EWMA_AAPL_var[1] <- lambda*standard_CovMatrix[1,1] + (1-lambda)*(AAPLReturns[499]-standard_Means[1])^2
EWMA_MSFT_var[1] <- lambda*standard_CovMatrix[2,2] + (1-lambda)*(MSFTReturns[499]-standard_Means[2])^2
EWMA_cov[1] <- lambda*standard_CovMatrix[1,2] + (1-lambda)*(AAPLReturns[499]-standard_Means[1])*(MSFTReturns[499]-standard_Means[2])
for (i in 2:(length(AAPLReturns)-500+2))
{
EWMA_AAPL_var[i] <- lambda*EWMA_AAPL_var[i-1] + (1-lambda)*(AAPLReturns[500+i-2]-EWMA_AAPL_mean[i-1])^2
EWMA_MSFT_var[i] <- lambda*EWMA_MSFT_var[i-1] + (1-lambda)*(MSFTReturns[500+i-2]-EWMA_MSFT_mean[i-1])^2
EWMA_cov[i] <- lambda*EWMA_cov[i-1] + (1-lambda)*(AAPLReturns[500+i-2]-EWMA_AAPL_mean[i-1])*(MSFTReturns[500+i-2]-EWMA_MSFT_mean[i-1])
}
EWMA_means <- c(EWMA_AAPL_mean[761],EWMA_MSFT_mean[761])
EWMA_Covariance_Matrix <- matrix(data = c(EWMA_AAPL_var[761],EWMA_cov[761],EWMA_cov[761],EWMA_MSFT_var[761]),nrow = 2,ncol = 2)
library(MASS)
EWMA_Simulation_Returns <- mvrnorm(50000,mu = EWMA_means,Sigma = EWMA_Covariance_Matrix)
Simulation_Loss <- -Vt * (wAAPL * (exp(EWMA_Simulation_Returns[,1])-1) + wMSFT * (exp(EWMA_Simulation_Returns[,2])-1))
VaR<- sort(Simulation_Loss)[ceiling(length(Simulation_Loss)*0.95)]
VaR
#Analytical VaR result
K<-20
sqrtVaR<-sqrt(K)*VaR
sqrtVaR
#squre of root VaR result
regulatoryVaR<-3*sqrt(10)*VaR
regulatoryVaR
#regulatory VaR, 3* squreroot of 10 *VaR
#stress testing
#sample from updated matrix
Stress_Loss<-c(0)
for( j in 1:50000)
{
Samplereturn<-matrix(rep(0,times = 40),nrow = 20, ncol = 2)
Samplereturn[1,]<- mvrnorm(1,mu = EWMA_means,Sigma = EWMA_Covariance_Matrix)
#replace the second return with extramely bad performance
sigma2<-sqrt(EWMA_Covariance_Matrix[2,2])
Stress_AAPL_mean <- c(0)
Stress_MSFT_mean <- c(0)
Stress_means<-matrix(rep(0,times = 40),nrow = 20, ncol = 2)
Stress_AAPL_var <- c(0)
Stress_MSFT_var <- c(0)
Stress_cov <- c(0)
Stress_AAPL_mean[1] <- Samplereturn[2]-5*sigma2
Stress_MSFT_mean[1] <- Samplereturn[1]
Stress_means[1,]<-cbind(Stress_AAPL_mean[1],Stress_MSFT_mean[1])
Stress_AAPL_var[1] <- EWMA_AAPL_var[761]
Stress_MSFT_var[1] <- EWMA_cov[761]
Stress_cov[1] <- EWMA_MSFT_var[761]
for (i in 2:20)
{
Stress_AAPL_mean[i] <- lambda*Stress_AAPL_mean[i-1]+(1-lambda)*Samplereturn[i-1,2]
Stress_MSFT_mean[i] <- lambda*Stress_MSFT_mean[i-1]+(1-lambda)*Samplereturn[i-1,1]
Stress_means[i,] <- cbind(Stress_AAPL_mean[i],Stress_MSFT_mean[i])
Stress_AAPL_var[i] <- lambda*Stress_AAPL_var[i-1] + (1-lambda)*(Samplereturn[i-1,2]-Stress_AAPL_mean[i-1])^2
Stress_MSFT_var[i] <- lambda*Stress_MSFT_var[i-1] + (1-lambda)*(Samplereturn[i-1,1]-Stress_MSFT_mean[i-1])^2
Stress_cov[i] <- lambda*Stress_cov[i-1] + (1-lambda)*(Samplereturn[i-1,2]-Stress_AAPL_mean[i-1])*(Samplereturn[i-1,1]-Stress_MSFT_mean[i-1])
Stress_Covariance_Matrix <- matrix(data = c(Stress_AAPL_var[i],Stress_cov[i],Stress_cov[i],Stress_MSFT_var[i]),nrow = 2,ncol = 2);library("corpcor");Stress_Covariance_Matrix <- make.positive.definite(Stress_Covariance_Matrix, tol=1e-3)
Samplereturn[i,]<- mvrnorm(1,mu = Stress_means[i,],Sigma = Stress_Covariance_Matrix)
}
Stress_Loss[j]<- -Vt * (wAAPL * (exp(sum(Samplereturn[,1]))-1) + wMSFT * (exp(sum(Samplereturn[,2]))-1))
}
Average_K_day_loss<-mean(Stress_Loss)
Average_K_day_loss
StressVaR<- sort(Stress_Loss)[ceiling(length(Stress_Loss)*0.95)]
StressVaR
SqrtVaR<-sqrt(20)*StressVaR
for (j in 1:50000 )
{
if (SqrtVaR>=StressLoss[j]) {p<-p+0}
else {p<-p+1}
}
Exceedance_of_Sqrt_VaR<-p
Capital_VaR<-3*sqrt(10)*StressVaR
for (j in 1:50000 )
{
if (Capital_VaR>=StressLoss[j]) {q<-q+0}
else {q<-q+1}
}
Exceedance_of_Capital_VaR<-q
hist(Stress_Loss)
hist(Stress_Loss, breaks = 40)
hist(Stress_Loss, breaks = 100)
abline(v = StressVaR)
standard_CovMatrix
cov_mat
for (sample in 1:M_hat){
results[sample,] <- multiVar(mu_mat, standard_CovMatrix, K, weight_matrix, ValPort)
}
# Exceedance
# Kday Var Exceedances
(K_Var_exceedances <- sum(results[[2]] > rep(K_VaR,M_hat)) )
# Regulatory Cap exceedances
(Reg_cap_exceedances <- sum(results[[2]] > rep(Reg_Cap,M_hat)) )
# Quick Plots...
hist(results[[2]], breaks = 100)
abline(v = K_VaR, col = "blue", lwd = 3)
abline(v = Reg_Cap, col = "red", lwd = 3) # doesn't even show up -- too far right
# Frequencies
(100/M_hat) * K_Var_exceedances
(100/M_hat) * Reg_cap_exceedances
(Reg_cap_exceedances <- sum(results[[2]] > rep(regulatoryVaR,M_hat)) )
# (Reg_cap_exceedances <- sum(results[[2]] > rep(Reg_Cap,M_hat)) )
# Quick Plots...
hist(results[[2]], breaks = 100)
abline(v = K_VaR, col = "blue", lwd = 3)
abline(v = Reg_Cap, col = "red", lwd = 3) # doesn't even show up -- too far right
# Frequencies
(100/M_hat) * Reg_cap_exceedances
(100/M_hat) * K_Var_exceedances
(K_Var_exceedances <- sum(results[[2]] > rep(sqrtVaR,M_hat)) )
#(K_Var_exceedances <- sum(results[[2]] > rep(K_VaR,M_hat)) )
# Regulatory Cap exceedances
(Reg_cap_exceedances <- sum(results[[2]] > rep(regulatoryVaR,M_hat)) )
# (Reg_cap_exceedances <- sum(results[[2]] > rep(Reg_Cap,M_hat)) )
# Quick Plots...
hist(results[[2]], breaks = 100)
abline(v = K_VaR, col = "blue", lwd = 3)
abline(v = Reg_Cap, col = "red", lwd = 3) # doesn't even show up -- too far right
# Frequencies
(100/M_hat) * K_Var_exceedances
(100/M_hat) * Reg_cap_exceedances
(K_Var_exceedances <- sum(results[[2]] > rep(64327,M_hat)) )
#(K_Var_exceedances <- sum(results[[2]] > rep(K_VaR,M_hat)) )
# Regulatory Cap exceedances
(Reg_cap_exceedances <- sum(results[[2]] > rep(regulatoryVaR,M_hat)) )
# (Reg_cap_exceedances <- sum(results[[2]] > rep(Reg_Cap,M_hat)) )
# Quick Plots...
hist(results[[2]], breaks = 100)
abline(v = K_VaR, col = "blue", lwd = 3)
abline(v = Reg_Cap, col = "red", lwd = 3) # doesn't even show up -- too far right
# Frequencies
(100/M_hat) * K_Var_exceedances
(100/M_hat) * Reg_cap_exceedances
(100/M_hat) * K_VaR
(100/M_hat) * Reg_Cap
(100/M_hat) * K_Var_exceedances
(100/M_hat) * Reg_cap_exceedances
setwd("C:/Users/board/Desktop/Kaggle/Scenario Analysis")
Data <- read.csv("MSFT_AAPL_Log_Returns.csv",header=TRUE)
###############################################################################################
###Corporate Risk Management HW3 Q2 Part I###
############################################################################################
#Log-returns
MSFT_Log_R <- Data$MSFT.Log.Return[!is.na(Data$MSFT.Log.Return)]
APPL_Log_R <- Data$AAPL.Log.Return[!is.na(Data$AAPL.Log.Return)]
#Portfolio parameters
Val_Port <- 1000000 #Portfolio Value
M_Cap_MSFT <- 448.77
M_Cap_APPL <- 577.1
# W_MSFT <- M_Cap_MSFT/(M_Cap_MSFT+M_Cap_APPL)#0.4383 ?slides
# W_APPL <- 1-W_MSFT #0.5617 ?slides
W_MSFT <- 0.5617
W_APPL <- 0.4383
Alpha <- 0.95 #Confidence
lambda <- 0.97
M <- 500 #Initial days EWMA
K <- 20 #K parameter for K-day VaR
length(MSFT_Log_R)==length(APPL_Log_R) #Check if if both have same # of obs.
n <- length(MSFT_Log_R) #Number of observations
#for-loop
mu_MSFT <- NULL
mu_APPL <- NULL
sigma_MSFT <- NULL
sigma_APPL <- NULL
cov_sigma<- NULL
# Initialize first numbers for EWMA for mu and covariance
mu_MSFT[1]<- mean(MSFT_Log_R[1:(M-1)])
mu_APPL[1]<- mean(APPL_Log_R[1:(M-1)])
sigma_MSFT[1]<-var(MSFT_Log_R[1:(M-1)])
sigma_APPL[1]<-var(APPL_Log_R[1:(M-1)])
cov_sigma[1]<-cov(MSFT_Log_R[1:(M-1)],APPL_Log_R[1:(M-1)])
# For loop for EWMA mu and covariance matrix
for(i in 1:(n-M-1)){
previous_day = M+i-1
#EWMA update for mu
mu_MSFT[i+1]<- lambda*mu_MSFT[(i)] +(1-lambda)*MSFT_Log_R[(previous_day)]
mu_APPL[i+1]<- lambda*mu_APPL[(i)]+(1-lambda)*APPL_Log_R[(previous_day)]
mu_mat <- matrix(c(mu_MSFT[i+1],mu_APPL[i+1]),nrow=2,ncol=1)
# EWMA update for covariance matrix
sigma_MSFT[i+1]<-lambda*sigma_MSFT[(i)] + (1-lambda)*
(MSFT_Log_R[(previous_day)]-mu_MSFT[i])^2
sigma_APPL[i+1]<-lambda*sigma_APPL[i] + (1-lambda)*
(APPL_Log_R[(previous_day)]-mu_APPL[i])^2
cov_sigma[i+1]<-lambda*cov_sigma[i] + (1-lambda)*
(MSFT_Log_R[(previous_day)]-mu_MSFT[i])*(APPL_Log_R[(previous_day)]-mu_APPL[i])
cov_mat <- matrix(c(sigma_MSFT[i+1],rep(cov_sigma[i+1],2),
sigma_APPL[i+1]),nrow=2,ncol=2)
}
#VaR calculations
weight_matrix <- matrix(c(W_MSFT,W_APPL),nrow=2,ncol=1) #MSFT AAPL weight matrix
Port_Dollar <- -Val_Port*weight_matrix # ct
(VaR <- (t(Port_Dollar)%*%mu_mat) +
(sqrt(t(Port_Dollar)%*%cov_mat%*%Port_Dollar))*qnorm(Alpha)) #Lin VaR
(K_VaR <- sqrt(K)*VaR) #K-day VaR
(Reg_Cap <- 3*(sqrt(K/2)*VaR)) #Regulatory Capital Change
#sim <- mvrnorm(50000, mu_mat, cov_mat)
#compare solutions with the values on slide 47 Lecture 8
##########################################################################
#########################################################################
####################  Question  3   #####################################
##########################################################################
#########################################################################
library(MASS)
multiVar <- function (mu_mat, cov_mat, K, weight_matrix, ValPort, Alpha = 0.95, lambda = 0.97){
# Reset mu, covariance matrix for EWMA
mu_MSFT <- NULL
mu_APPL <- NULL
mu_MSFT[1] <- mu_mat[1]
mu_APPL[1] <- mu_mat[2]
sigma_MSFT <- NULL
sigma_APPL <- NULL
cov_sigma <- NULL
sigma_MSFT[1] <- cov_mat[1,1]
sigma_APPL[1] <- cov_mat[2,2]
cov_sigma[1] <- cov_mat[1,2]
# Initialize return matrix for K days
Returns_sum1 <- rep(0, K)
Returns_sum2 <- rep(0, K)
# First observations for the shock
Xtplusdelta = mvrnorm(n=1,mu_mat,cov_mat)
Xtplusdelta[2] = mu_mat[2] - 5* (cov_mat[2,2]) #shock
for(i in 1:(K-1)) { # For each day after the shock
# Update mu with new observations
mu_MSFT[i+1]<- lambda*mu_MSFT[i]+(1-lambda)*Xtplusdelta[1]
mu_APPL[i+1]<- lambda*mu_APPL[i]+(1-lambda)*Xtplusdelta[2]
mu_mat <- matrix(c(mu_MSFT[i+1],mu_APPL[i+1]),nrow=2,ncol=1)
# Update EWMA covariance matrix with new observations
sigma_MSFT[i+1]<-lambda*sigma_MSFT[i] + (1-lambda)*
(Xtplusdelta[1]-mu_MSFT[i])^2
sigma_APPL[i+1]<-lambda*sigma_APPL[i] + (1-lambda)*
(Xtplusdelta[2]-mu_APPL[i])^2
cov_sigma[i+1]<-lambda*cov_sigma[i] + (1-lambda)*
(Xtplusdelta[1]-mu_MSFT[i])*(Xtplusdelta[2]-mu_APPL[i])
cov_mat <- matrix(c(sigma_MSFT[i+1],rep(cov_sigma[i+1],2),
sigma_APPL[i+1]),nrow=2,ncol=2)
# Store returns
Returns_sum1[i+1] = Returns_sum1[i]+ Xtplusdelta[1]
Returns_sum2[i+1] = Returns_sum2[i]+ Xtplusdelta[2]
# Redraw from multivariate distribution with new mu and covariance matrix
Xtplusdelta = mvrnorm(n=1,mu_mat,cov_mat)
}
# VaR Calculations
# weight_matrix <- matrix(c(W_MSFT,W_APPL),nrow=2,ncol=1) #MSFT AAPL weight matrix
Port_Dollar <- -Val_Port*weight_matrix # ct
(VaR <- (t(Port_Dollar)%*%mu_mat) +
(sqrt(t(Port_Dollar)%*%cov_mat%*%Port_Dollar))*qnorm(Alpha)) #Lin VaR
(K_VaR <- sqrt(K)*VaR) #K-day VaR
# (Reg_Cap <- 3*(sqrt(K/2)*VaR)) #Regulatory Capital Change
(Loss_kplusdelta = Port_Dollar[1]*Returns_sum1[K] +Port_Dollar[2]*Returns_sum2[K])
return (c(Loss_kplusdelta, K_VaR))
}
M_hat <-  50000
# Pre allocate space
results <- data.frame(matrix(0,nrow = M_hat, ncol = 2))
names(results)[1:2] <- c("Loss", "K_Var")
# MC
for (sample in 1:M_hat){
results[sample,] <- multiVar(mu_mat, cov_mat, K, weight_matrix, ValPort)
}
# Exceedance
# Kday Var Exceedances
(K_Var_exceedances <- sum(results[[2]] > rep(K_VaR,M_hat)) )
# Regulatory Cap exceedances
(Reg_cap_exceedances <- sum(results[[2]] > rep(Reg_Cap,M_hat)) )
# Quick Plots...
hist(results[[2]], breaks = 100)
abline(v = K_VaR, col = "blue", lwd = 3)
abline(v = Reg_Cap, col = "red", lwd = 3) # doesn't even show up -- too far right
# Frequencies
(100/M_hat) * K_Var
(100/M_hat) * Reg_Cap
(100/M_hat) * K_VaR
(100/M_hat) * K_Var_exceedances
(100/M_hat) * Reg_cap_exceedances
