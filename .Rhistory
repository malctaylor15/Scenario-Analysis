debug[(j*i+j-1),c(1,2,3,4)] <- c(Z,V,Y,product)
}
# Calculate MSE
b_results[i,2] <- (E-mean(Z_k_C_b))^2
}
# Initialize variables
X0 <- 2000
sigma <- 0.17
T_mat <- 1
S <- 2200 # Original stock price - calculate option value
lambda <- 2
a <- -0.05 # Xn mean?
K <- 500 # Number of samples for MC estimator
E <- 31.68 # Actual value of option (for MSE)
b <- 0.03
b_vec <- seq(from = -3, to =3 , by = 0.1)
numb_b <- length(b_vec)
N_hat_vec <- rpois(K*numb_b, lambda)
B_hat_vec <- rnorm(K*numb_b, mean=  0, sd = sqrt(T_mat) )
Z_k_C_b <- rep(1,K)
# Prepare b data frame
b_results <- data.frame(matrix(0,nrow= numb_b, ncol =2 ))
b_results[[1]] <- b_vec
names(b_results)[c(1,2)] <- c("b", "MSE")
# debug <- data.frame(matrix(1,nrow = (numb_b+1)*K, ncol = 5))
for(i in 1:numb_b){ # For all the values of b
for(j in 1:K){ # For each Monte Carlo sample
# Fix N_hat if it is = 0
if (N_hat_vec[i*j-j+1] ==0){
N_hat <- 1
} else{
N_hat <- N_hat_vec[i*j-j+1]
}
#Choose current b_hat (Norm 0,1)
B_hat <- B_hat_vec[i*j-j+1]
# Generate Xn
mert <- rep(1,N_hat)
X_hat1 <- rnorm(N_hat,a,b^2)
for(r in 1:N_hat){
mert[r] <- exp(X_hat1[r])
}
#Product of Xn
product <- prod(mert)
# product <- exp(rnorm(N_hat,a,b_vec[i]^2))
# Generate control samples
Z <- X0*exp(-(sigma^2/2)*T_mat+sigma*B_hat)*product
V <- X0*exp(-(sigma^2/2)*T_mat-sigma*B_hat)
EV <- X0*exp((-sigma^2/2)*T_mat) # Expected value of V
Y <- Z-b_vec[i]*(V-EV)
# Option payoff
if (Y<S){ Z_k_C_b[j] = 0} else {Z_k_C_b[j]=(Y-S)}
# Z_k_C_b[j] = if(Y<S) 0 else (Y-S)
# debug[(j*i+j-1),c(1,2,3,4)] <- c(Z,V,Y,product)
}
# Calculate MSE
b_results[i,2] <- (E-mean(Z_k_C_b))^2
}
summary(b_results)
plot(b_results[[1]],b_results[[2]] )
min(b_results[[2]])
which(b_results[[1]] == min(b_results[[2]]))
which(b_results[[2]] == min(b_results[[2]]))
opt_b <- which(b_results[[2]] == min(b_results[[2]]))
b_results[opt_b, ]
plot(b_results[[1]],b_results[[2]], type = "l" )
plot(b_results[[1]],b_results[[2]] )
?point
summary(b_results[[2]])
plot(b_results[[1]],b_results[[2]], xlab = "b", ylab = "MSE" )
?plot
?abline
opt_b <- which(b_results[[2]] == minMSE))
minMSE <-min(b_results[[2]])
opt_b <- which(b_results[[2]] == minMSE))
min_row <- b_results[opt_b, ]
min_row <- b_results[opt_b, ]
View(min_row)
View(min_row)
?points
plot(b_results[[1]],b_results[[2]], xlab = "b", ylab = "MSE" )
points(min_row[1], minMSE, col = "red", pch =1)
plot(b_results[[1]],b_results[[2]], xlab = "b", ylab = "MSE", main = "MSE v b (control variate)" )
points(min_row[1], minMSE, col = "red", pch =1)
?plot
plot(b_results[[1]],b_results[[2]], xlab = "b", ylab = "MSE", main = "MSE v b (control variate)", lwd = 5 )
plot(b_results[[1]],b_results[[2]], xlab = "b", ylab = "MSE", main = "MSE v b (control variate)", lwd = 3 )
points(min_row[1], minMSE, col = "red", pch =1, lwd = 3)
min_row
plot(b_results[[1]],b_results[[2]], xlab = "b", ylab = "MSE", main = "MSE v b (control variate)", lwd = 3 )
points(min_row[1], minMSE, col = "red", pch =1, lwd = 3)
clc
clear
K*numb_b
P <- c(0.99, 0.975, 0.955, 0.930)
B1 <- c(1,2,3,4)
B <- exp(0.6*B1)
den <- sum(B*P)
B <- exp(0.06*B1)
#Denominator
den <- sum(B*P)
den/2
P2 <- diff(P)
P2 <- c(0,diff(P))
Pj <- c(0.99, 0.975, 0.955, 0.930)
Pj1 <- c(0,diff(P))
num <- sum(B*(Pj1-P))
num/den
Pj1-Pj
Pj1 <- c(1,diff(P))
#Denominator
den <- sum(B*P*delta )
#Numerator
num <- sum(B*(Pj1-P))
num/den
num/den * 0.8
Pj1 <- c(0,diff(P))
#Denominator
den <- sum(B*P*delta )
#Numerator
num <- sum(B*(Pj1-P))
num/den * 0.8
B
Pj <- c(0.99, 0.975, 0.955, 0.930)
B1 <- c(1,2,3,4)
B <- exp(-0.06*B1)
delta <- rep(1,4)
Pj1 <- c(0,diff(P))
#Denominator
den <- sum(B*P*delta )
#Numerator
num <- sum(B*(Pj1-P))
num/den * 0.8
B
Pj1 <- c(1,0.99,0.975,0.955)
#Denominator
den <- sum(B*P*delta )
#Numerator
num <- sum(B*(Pj1-P))
num/den * 0.8
seq(1,8,by=1)
x <- seq(1,8,by=1)
DefaultTimes <- 0.5*x
DefaultBonds <- exp(-0.06*DefaultTimes)
Pj_default <- c(0.995, 0.99, 0.9825, 0.975, 0.965, 0.955, 0.9425, 0.930)
DefaultTimes <- seq(1,4,by=1)
DefaultBonds <- exp(-0.06*DefaultTimes)
Pj1_default <- c(1,Pj_default[-length(Pj_default)])
DefaultTimes <- seq(1,4,by=0.5)
DefaultBonds <- exp(-0.06*DefaultTimes)
Pj_default <- c(0.995, 0.99, 0.9825, 0.975, 0.965, 0.955, 0.9425, 0.930)
Pj1_default <- c(1,Pj_default[-length(Pj_default)])
Pj1_default <- c(1,Pj_default[-length(Pj_default)])
premiumBonds <- exp(-0.06*seq(1,4,by=1))
premiumBonds <- exp(-0.06*seq(1,4,by=1))
pj_premium <- c(0.99, 0.975, 0.955, 0.930)
denominator <- sum(premiumBonds*pj_premium)
numerator/denominator
numerator <- sum(DefaultBonds*(Pj1_default - Pj_default))
DefaultTimes <- seq(1,4,by=0.5)
DefaultBonds <- exp(-0.06*DefaultTimes)
Pj_default <- c(0.995, 0.99, 0.9825, 0.975, 0.965, 0.955, 0.9425, 0.930)
Pj1_default <- c(1,Pj_default[-length(Pj_default)])
premiumBonds <- exp(-0.06*seq(1,4,by=1))
pj_premium <- c(0.99, 0.975, 0.955, 0.930)
numerator <- sum(DefaultBonds*(Pj1_default - Pj_default))
DefaultTimes <- seq(0,4,by=0.5)
DefaultTimes <- seq(0.5,4,by=0.5)
DefaultTimes <- seq(0.5,4,by=0.5)
DefaultBonds <- exp(-0.06*DefaultTimes)
Pj_default <- c(0.995, 0.99, 0.9825, 0.975, 0.965, 0.955, 0.9425, 0.930)
Pj1_default <- c(1,Pj_default[-length(Pj_default)])
premiumBonds <- exp(-0.06*seq(1,4,by=1))
pj_premium <- c(0.99, 0.975, 0.955, 0.930)
numerator <- sum(DefaultBonds*(Pj1_default - Pj_default))
denominator <- sum(premiumBonds*pj_premium)
numerator/denominator
numerator/denominator * 0.8
# Q3
DefaultTimes <- seq(0.5,4,by=0.5)
DefaultBonds <- exp(-0.06*DefaultTimes)
Pj_default <- c(0.995, 0.99, 0.9825, 0.975, 0.965, 0.955, 0.9425, 0.930)
Pj1_default <- c(1,Pj_default[-length(Pj_default)])
premiumBonds <- exp(-0.06*seq(1,4,by=1))
pj_premium <- c(0.99, 0.975, 0.955, 0.930)
numerator <- sum(DefaultBonds*(Pj1_default - Pj_default))
denominator <- sum(premiumBonds*pj_premium)
numerator/denominator * 0.8
# DDS
numerator/denominator
# Brownian motion
# Number of steps
N <- 1000
dis <- rnorm(N, 0, 1)
dist <- cumsum(dis)
plot(dist, type = "l", main = "Brownian Motion", xlab = "time", ylab = "displacement")
# Appendix of this site
# https://www.stat.berkeley.edu/~aldous/Research/Ugrad/ZY1.pdf
hist(dis)
hist(dist)
hist(dist,breaks = 40)
qqplot(dist)
qqline(dist)
?qqplot
qqnorm(dist)
qqline
qqline(dist)
}
newton <- function(f, tol=1E-12,x0=1,N=20) {
h <- 0.001
i <- 1; x1 <- x0
p <- numeric(N)
while (i<=N) {
df.dx <- (f(x0+h)-f(x0))/h
x1 <- (x0 - (f(x0)/df.dx))
p[i] <- x1
i <- i + 1
if (abs(x1-x0) < tol) break
x0 <- x1
}
return(p[1:(i-1)])
}
f <- function(x){sqrt(x)}
f(2)
p <- newton(f, x0 = 10, N=10)
p <- newton(f(2), x0 = 10, N=10)
p
p <- newton(f(2), x0 = 10, N=10)
p
p <- newton(f(2), x0 = 2, N=10)
p <- newton(f, x0 = 2, N=10)
f <- function(x){x^2}
f(2)
p <- newton(f, x0 = 2, N=10)
p
sqrt(2)
p <- newton(f, x0 = 4, N=10)
p
sqrt(2)
f <- function(x){sqrt(x)}
f <- function(x){x^2}
f2 <- function(x){sqrt(x)}
sqrt(2)
p <- newton(f, x0 = 4, N=10)
p
p <- newton(f, x0 = 4, N=10)
p
f <- function(x){x^2 - 2}
f2 <- function(x){sqrt(x)}
sqrt(2)
p <- newton(f, x0 = 4, N=10)
p
newton <- function(f, tol=1E-12,x0=1,N=40) {
h <- 0.001
i <- 1; x1 <- x0
p <- numeric(N)
while (i<=N) {
df.dx <- (f(x0+h)-f(x0))/h
x1 <- (x0 - (f(x0)/df.dx))
p[i] <- x1
i <- i + 1
if (abs(x1-x0) < tol) break
x0 <- x1
}
# return(p[1:(i-1)])
return(p[(i-1)])
}
f <- function(x){x^2 - 2}
# Value we wish to compute
sqrt(2)
# Change
p <- newton(f, x0 = x00, N=40)
x00 = 40
p <- newton(f, x0 = x00, N=40)
r
p
x00 <- 1000
p <- newton(f, x0 = x00, N=40)
p
x00 <- 10002
p <- newton(f, x0 = x00, N=40)
p
p1 <- newton(f, x0 = x00, N=40)
p1
newton <- function(f, tol=1E-12,x0=1,N=10) {
h <- 0.001
i <- 1; x1 <- x0
p <- numeric(N)
while (i<=N) {
df.dx <- (f(x0+h)-f(x0))/h
x1 <- (x0 - (f(x0)/df.dx))
p[i] <- x1
i <- i + 1
if (abs(x1-x0) < tol) break
x0 <- x1
}
# return(p[1:(i-1)])
#return(p[(i-1)])
}
# Function for finding sqrt(2)
f <- function(x){x^2 - 2}
# Value we wish to compute
sqrt(2)
# Change
x00 <- 10002
p1 <- newton(f, x0 = x00, N=40)
p1
# Malcolm Taylor
# HW 5 Q2c
# Newton Code from http://www.theresearchkitchen.com/archives/642
newton <- function(f, tol=1E-12,x0=1,N=10) {
h <- 0.001
i <- 1; x1 <- x0
p <- numeric(N)
while (i<=N) {
df.dx <- (f(x0+h)-f(x0))/h
x1 <- (x0 - (f(x0)/df.dx))
p[i] <- x1
i <- i + 1
if (abs(x1-x0) < tol) break
x0 <- x1
}
return(p[1:(i-1)])
#return(p[(i-1)])
}
# Function for finding sqrt(2)
f <- function(x){x^2 - 2}
# Value we wish to compute
sqrt(2)
# Change
x00 <- 10002
p1 <- newton(f, x0 = x00, N=40)
p1
# Malcolm Taylor
# HW 5 Q2c
# Newton Code from http://www.theresearchkitchen.com/archives/642
newton <- function(f, tol=1E-12,x0=1,N=10) {
h <- 0.001
i <- 1; x1 <- x0
p <- numeric(N)
while (i<=N) {
df.dx <- (f(x0+h)-f(x0))/h
x1 <- (x0 - (f(x0)/df.dx))
p[i] <- x1
i <- i + 1
if (abs(x1-x0) < tol) break
x0 <- x1
}
return(p[1:(i-1)])
#return(p[(i-1)])
}
# Function for finding sqrt(2)
f <- function(x){x^2 - 2}
# Value we wish to compute
sqrt(2)
# Change
x00 <- 10002
p1 <- newton(f, x0 = x00, N=10)
p1
f <- function(x){x^2 - 0.00001}
# Value we wish to compute
sqrt(2)
# Change
x00 <- 10002
p1 <- newton(f, x0 = x00, N=50)
p1
p1 <- newton(f, x0 = x00, N=100)
p1
p1 <- newton(f, x0 = x00, N=100)
p1
x00 <- 5
p1 <- newton(f, x0 = x00, N=100)
p1
f <- function(x){x^2 - 2}
# Value we wish to compute
sqrt(2)
# Change
x00 <- 5
p1 <- newton(f, x0 = -x00, N=100)
p1
p1 <- newton(f, x0 = 0, N=100)
p1
# Malcolm Taylor
# HW 5 Q2c
# Newton Code from http://www.theresearchkitchen.com/archives/642
newton <- function(f, tol=1E-12,x0=1,N=10) {
h <- 0.001
i <- 1; x1 <- x0
p <- numeric(N)
while (i<=N) {
df.dx <- (f(x0+h)-f(x0))/h
x1 <- (x0 - (f(x0)/df.dx))
p[i] <- x1
i <- i + 1
if (abs(x1-x0) < tol) break
x0 <- x1
}
return(p[1:(i-1)])
#return(p[(i-1)])
}
# Function for finding sqrt(2)
f <- function(x){x^2 - 2}
# Value we wish to compute
sqrt(2)
# Change
p1 <- newton(f)
p1
library(RQuantLib)
?fsolve
?solve
?optim
library(fExtremes)
library(fExtremes)
setwd("C:/Users/board/Desktop/Kaggle/Scenario Analysis")
data <- read.csv("SP_500_Log_Returns_19600610_19871016.csv")
GEV_data_lin <- read.csv("max_block_value_lin.csv") # GEV using linear loss operator
GP_data_lin <- read.csv("GP_data_lin.csv") # GP using linear loss operator
GEV_data_full <-read.csv("max_block_value_full.csv")
GP_data_full <- read.csv("GP_data_full.csv")
linear_loss <- -1000000* data[[4]]
full_loss <- 1000000*(exp(data[[4]]) -1)
again <- gevFit(full_loss, block = 125)
again
oncemore <- gpdFit(full_loss)
oncemore
names(oncemore)
oncemore[1]
oncemore[[1]]
all_data <- c(GEV_Vars, GP_Vars, Var_reg)
max(all_data)
plot(Var_levels, GEV_Vars, ylim = c(min(all_data), max(all_data)),type = 'l', col= 'red', lwd = 4)
lines(Var_levels ,GP_Vars,type = 'l', col = 'blue' , lwd = 4)
Var_levels = seq(from = 0.99, to = 0.9999,by = 0.000099)
Var_reg = quantile(linear_loss, Var_levels)
GEV_Vars = qgev(Var_levels, xi = 0.176, mu = 7400, beta = 2722)
GP_Vars =  qgpd(Var_levels, xi = 5.65e-2, beta = 2.30e3 )
again <- gevFit(full_loss, block = 125)
again
oncemore <- gpdFit(full_loss)
oncemore
all_data <- c(GEV_Vars, GP_Vars, Var_reg)
max(all_data)
plot(Var_levels, GEV_Vars, ylim = c(min(all_data), max(all_data)),type = 'l', col= 'red', lwd = 4)
lines(Var_levels ,GP_Vars,type = 'l', col = 'blue' , lwd = 4)
lines(Var_levels, Var_reg, type = 'l', col = 'green', lwd =4)
legend("topleft", c("GEV", "GP", "VaR Empirical", "VaR Analytical"), lwd = 4, col = c("red", "blue", "green", "orange"))
ewma = function(logreturns, M, lamda , n){
mu_returns = NULL
sigma_returns = NULL
mu_returns[M]<- mean(logreturns[1:M-1])
sigma_returns[M]<- var(logreturns[1:M-1])
for(i in (M):(n-1)){
mu_returns[i+1]<- lambda*mu_returns[i]+(1-lambda)*logreturns[i]
sigma_returns[i+1]<-lambda*sigma_returns[i] + (1-lambda)*(logreturns[i]-mu_returns[i])^2
}
return(mu_returns,sigma_returns)
}
ewma_results<- ewma(full_loss)
length(full_loss)
ewma = function(logreturns, M = 500, lamda = 0.97){
length(logreturns)
n = length(logreturns)
mu_returns = NULL
sigma_returns = NULL
mu_returns[M]<- mean(logreturns[1:M-1])
sigma_returns[M]<- var(logreturns[1:M-1])
for(i in (M):(n-1)){
mu_returns[i+1]<- lambda*mu_returns[i]+(1-lambda)*logreturns[i]
sigma_returns[i+1]<-lambda*sigma_returns[i] + (1-lambda)*(logreturns[i]-mu_returns[i])^2
}
return(mu_returns,sigma_returns)
}
ewma = function(logreturns, M = 500, lamda = 0.97){
n = length(logreturns)
mu_returns = NULL
sigma_returns = NULL
mu_returns[M]<- mean(logreturns[1:M-1])
sigma_returns[M]<- var(logreturns[1:M-1])
for(i in (M):(n-1)){
mu_returns[i+1]<- lambda*mu_returns[i]+(1-lambda)*logreturns[i]
sigma_returns[i+1]<-lambda*sigma_returns[i] + (1-lambda)*(logreturns[i]-mu_returns[i])^2
}
return(mu_returns,sigma_returns)
}
ewma_results<- ewma(full_loss)
ewma = function(logreturns, M = 500, lamda = 0.97){
n = length(logreturns)
mu_returns = NULL
sigma_returns = NULL
mu_returns[M]<- mean(logreturns[1:M-1])
sigma_returns[M]<- var(logreturns[1:M-1])
for(i in (M):(n-1)){
mu_returns[i+1]<- lambda*mu_returns[i]+(1-lambda)*logreturns[i]
sigma_returns[i+1]<-lambda*sigma_returns[i] + (1-lambda)*(logreturns[i]-mu_returns[i])^2
}
return( [ mu_returns,sigma_returns])
}
list[1,2]
list(1,2)
ewma = function(logreturns, M = 500, lamda = 0.97){
n = length(logreturns)
mu_returns = NULL
sigma_returns = NULL
mu_returns[M]<- mean(logreturns[1:M-1])
sigma_returns[M]<- var(logreturns[1:M-1])
for(i in (M):(n-1)){
mu_returns[i+1]<- lambda*mu_returns[i]+(1-lambda)*logreturns[i]
sigma_returns[i+1]<-lambda*sigma_returns[i] + (1-lambda)*(logreturns[i]-mu_returns[i])^2
}
return( list(mu_returns,sigma_returns) )
}
ewma_results<- ewma(full_loss)
ewma_results
